package com.tutuur.navigator;

import android.os.Bundle;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import com.tutuur.util.AnnotationProcessorHelper;

import java.util.List;

import javax.lang.model.element.Modifier;
import javax.lang.model.element.Name;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;

class BundleBuilderGenerator {

    private final String TAG = BundleBuilderGenerator.class.getSimpleName();

    private static final String COMMENT = "Generated by com.tutuur.navigator.NavigationProcessor. Do not modify!";

    private static final String CLASS_NAME_FORMAT = "%sBundleBuilder";

    private static final String EXTRA_KEY_FORMAT = "EXTRA_KEY_%s";

    private final AnnotationProcessorHelper helper;

    private final TypeElement clazz;

    private final List<VariableElement> members;

    BundleBuilderGenerator(AnnotationProcessorHelper helper, TypeElement clazz, List<VariableElement> members) {
        this.helper = helper;
        this.clazz = clazz;
        this.members = members;
    }

    public JavaFile brewJava() {
        if (clazz == null || members == null || members.isEmpty()) {
            return null;
        }
        final String packageName = helper.getPackageName(clazz);
        return JavaFile.builder(packageName, brewType(packageName))
                .addFileComment(COMMENT)
                .build();
    }

    private TypeSpec brewType(String packageName) {
        final String clazzName = String.format(CLASS_NAME_FORMAT, clazz.getSimpleName());
        helper.i(TAG, String.format("Generating BundleBuilder: %s.%s", packageName, clazzName));
        final ClassName clazzType = ClassName.get(packageName, clazzName);
        TypeSpec.Builder builder = TypeSpec.classBuilder(clazzType)
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL);
        for (VariableElement member : members) {
            brewAttribute(builder, clazzType, member);
        }
        brewBuild(builder);
        return builder.build();
    }

    private void brewAttribute(TypeSpec.Builder builder, ClassName clazzType, VariableElement member) {
        final String name = member.getSimpleName().toString();
        final TypeName type = TypeName.get(member.asType());
        builder.addField(type, name, Modifier.PRIVATE);
        // add get method.
        builder.addMethod(MethodSpec.methodBuilder(name)
                .addModifiers(Modifier.PUBLIC)
                .returns(type)
                .addStatement(String.format("return this.%s", name))
                .build());
        // add set method.
        builder.addMethod(MethodSpec.methodBuilder(name)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(type, "value")
                .returns(clazzType)
                .addStatement(String.format("this.%s = value", name))
                .addStatement("return this")
                .build());
    }

    private void brewBuild(TypeSpec.Builder builder) {
        final MethodSpec.Builder methodBuilder = MethodSpec.methodBuilder("build")
                .addModifiers(Modifier.PUBLIC)
                .returns(ClassName.get(Bundle.class))
                .addStatement("$T var0 = new $T()", Bundle.class, Bundle.class);
        for (VariableElement member : members) {
            final TypeName type = TypeName.get(member.asType());
            final Name name = member.getSimpleName();
            final String key = String.format(EXTRA_KEY_FORMAT, name);
            if (type == TypeName.BOOLEAN) {
                methodBuilder.addStatement("var0.putShort($S, $N)", key, name);
            } else if (type == TypeName.LONG) {
                methodBuilder.addStatement("var0.putLong($S, $N)", key, name);
            } else if (helper.isString(member.asType())) {
                methodBuilder.addStatement("var0.putString($S, $N)", key, name);
            }
        }
        methodBuilder.addStatement("return var0");
        builder.addMethod(methodBuilder.build());
    }
}
